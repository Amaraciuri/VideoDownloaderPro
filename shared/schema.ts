import { sql } from "drizzle-orm";
import { pgTable, text, varchar, timestamp, index } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

// AI titles storage for video titles generated by AI
export const aiTitles = pgTable("ai_titles", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  videoId: varchar("video_id").notNull().unique(),
  originalTitle: text("original_title").notNull(),
  aiTitle: text("ai_title").notNull(),
  thumbnailUrl: text("thumbnail_url"),
  confidence: varchar("confidence").default("0.8"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
}, (table) => [
  index("idx_ai_titles_video_id").on(table.videoId),
]);

export const insertAiTitleSchema = createInsertSchema(aiTitles).pick({
  videoId: true,
  originalTitle: true,
  aiTitle: true,
  thumbnailUrl: true,
  confidence: true,
});

export type AiTitle = typeof aiTitles.$inferSelect;
export type InsertAiTitle = z.infer<typeof insertAiTitleSchema>;
